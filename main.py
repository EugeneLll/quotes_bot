import asyncio
import logging
import sys


from aiogram import Bot, Dispatcher, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram import types
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram import F
from aiogram.filters import Command
import secret

TOKEN = secret.API


session = AiohttpSession(proxy="http://proxy.server:3128")
dp = Dispatcher()
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML),session=session)

@dp.message(Command("start"))
async def start(message: types.Message):

    await message.answer(
        "–ø—Ä–∏–≤–µ—Ç! –æ—Ç–ø—Ä–∞–≤—å —Ü–∏—Ç–∞—Ç—É –∏ –∞–≤—Ç–æ—Ä–∞ —Ç–µ–∫—Å—Ç–æ–º, —Ñ–æ—Ç–æ—á–∫—É, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–∞–∂–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ! –Ω–æ –Ω–∏ –∑–∞ —á—Ç–æ –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–π —Å—Ç–∏–∫–µ—Ä—ã. –º—ã –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–ª–∏.\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –µ—Å—Ç—å –≤ —ç—Ç–æ–º –±–æ—Ç–µ, –Ω–∞–ø–∏—à–∏ /cmds."
    )


@dp.message(Command("help"))
async def help(message: types.Message):

    await message.answer(
        "–ø—Ä–∏–º–µ—Ä –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã:\n\n–§—É–Ω–∫—Ü–∏—è –∑–∞–±—ã–ª–∞, —á—Ç–æ –Ω–∞ –Ω–æ—á—å –µ—Å—Ç—å –Ω–µ–ª—å–∑—è, –∏ –µ—ë —Ä–∞–∑–Ω–µ—Å–ª–æ\n¬© –ö—Ä–æ—Ç–æ–≤ –í.–ì."
    )
    await message.answer("–î–µ—Ä–∂–∏ –∑–Ω–∞—á–æ–∫ –∫–æ–ø–∏—Ä–∞–π—Ç–∞:")
    await message.answer("¬©")


@dp.message(Command("cmds"))
async def cmds(message: types.Message):
    await message.answer(
        '–Ω–∞–∂–º–∏ /help –∏ –ø–æ–ª—É—á–∏—à—å –ø–æ–º–æ—â—å –ø–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é —Ü–∏—Ç–∞—Ç—ã –∏ –∑–Ω–∞—á–æ–∫ –∫–æ–ø–∏—Ä–∞–π—Ç–∞\n\n–Ω–∞–∂–º–∏ /rand –∏ –ø–æ–ª—É—á–∏—à—å —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É –∏–∑ –∫–∞–Ω–∞–ª–∞ "–∫–≤–æ—Ç–µ—Å"\n\n–Ω–∞–∂–º–∏ /stop –∏ —Ç—ã –æ—Ç–ø–∏—à–µ—à—å—Å—è –æ—Ç –±–æ—Ç–∞ :('
    )


@dp.message(Command("stop"))
async def stop(message: types.Message):
    await message.answer(
        "—Ç—ã –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–∂–µ—à—å –æ–±—â–∞—Ç—å—Å—è —Å –Ω–∞–º–∏, "
        + message.chat.first_name
        + "( –∂–∞–ª—å, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫ –Ω–∞–º —Å–∫–æ—Ä–µ–µ\n–µ—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É, –Ω–∞–ø–∏—à–∏ /start"
    )


@dp.message(Command("rand"))
async def rand(message: types.Message):
    pass


@dp.message(F.content_type.in_({"voice"}))
async def voice(message: types.Message):

    if int(message.chat.id) != int(secret.ID):
        mes = (
            "<a href='tg://user?id="
            + str(message.chat.id)
            + "'>"
            + str(message.chat.first_name)
            + "</a> | <code>"
            + str(message.chat.id)
            + "</code>"
        )

        await bot.send_message(secret.ID, mes, parse_mode="html")
        to_pin = await bot.forward_message(
            secret.ID, message.chat.id, message.message_id
        )
        await bot.pin_chat_message(
            secret.ID, to_pin.message_id, disable_notification=True
        )

        await message.reply(
            f"{message.chat.first_name}, —Å–ø–∞—Å–∏–±–æ –∑–∞... –∑–∞ —á—Ç–æ –±—ã —Ç–∞–º –Ω–∏ –±—ã–ª–æ! üëç"
        )
    else:
        pass


@dp.message(F.content_type.in_({"photo"}))
async def photos(message):
    if int(message.chat.id) != int(secret.ID):
        mes = (
            "<a href='tg://user?id="
            + str(message.chat.id)
            + "'>"
            + str(message.chat.first_name)
            + "</a> | <code>"
            + str(message.chat.id)
            + "</code>"
        )
        await bot.send_message(secret.ID, mes, parse_mode="html")
        to_pin = await bot.forward_message(
            secret.ID, message.chat.id, message.message_id
        )
        await bot.pin_chat_message(
            secret.ID, to_pin.message_id, disable_notification=True
        )
        await bot.send_message(
            message.chat.id,
            "%s, —Å–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ç–æ—á–∫—É (–Ω–∞–¥–µ—é—Å—å, –Ω–∞ –Ω–µ–π –∫—Ä–∞—Å–æ—Ç–æ—á–∫–∞)! üëç"
            % message.chat.first_name,
        )
    else:
        pass


@dp.message(F.content_type.in_({"video"}))
async def videos(message):
    if int(message.chat.id) != int(secret.ID):
        mes = (
            "<a href='tg://user?id="
            + str(message.chat.id)
            + "'>"
            + str(message.chat.first_name)
            + "</a> | <code>"
            + str(message.chat.id)
            + "</code>"
        )
        await bot.send_message(secret.ID, mes, parse_mode="html")
        to_pin = await bot.forward_message(secret.ID, message.chat.id, message.message_id)
        await bot.pin_chat_message(
            secret.ID, to_pin.message_id, disable_notification=True
        )
        await bot.send_message(
            message.chat.id, "%s, —Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–∏–¥–æ—Å–∏–∫! üëç" % message.chat.first_name
        )
    else:
        pass


@dp.message(F.content_type.in_({"sticker"}))
async def stickers(message):
    if int(message.chat.id) != int(secret.ID):
        await message.answer("%s, –Ω–µ —Å–ø–∞–º—å, –∞ —Ç–æ –ø–æ–ª—É—á–∏—à—å –ø–æ –∂–æ–ø–µ!" % message.chat.first_name)
    else:
        pass


@dp.message(F.content_type.in_({"text"}))
async def messages(message):
  if int(message.chat.id) == int(secret.ID):
    """
    try:
      chatId = message.text.split(': ')[0]
      text = message.text.split(': ')[1]
      if chatId == "@all":
        sql.execute('SELECT user_id FROM quot_users_bot')
        result = sql.fetchall()
        for x in result:
          bot.send_message(x[0], str(text))
      else:
        bot.send_message(chatId, text)
    except:
      pass
    """
    pass
  else:
    if message.chat.username is None:
      mes = "<a href='tg://user?id=" + str(message.chat.id) + "'>" + str(
        message.chat.first_name) + '</a> | <code>' + str(
          message.chat.id) + '</code>'
    else:
      mes = "<a href='https://t.me/" + str(message.chat.username) + "'>" + str(
        message.chat.first_name) + '</a> | <code>' + str(
          message.chat.id) + '</code>'

    to_pin = await bot.send_message(secret.ID,
                              mes + '\n\n<code>' + message.text + '</code>',
                              parse_mode='html')
    #bot.forward_message(config.owner, message.chat.id, message.id)
    #to_pin = bot.send_message(config.owner,'<code>' + message.text + '</code>', parse_mode='html')
    await bot.pin_chat_message(secret.ID,
                         to_pin.message_id,
                         disable_notification=True)
    await bot.send_message(message.chat.id,
                     '%s, —Å–ø–∞—Å–∏–±–æ –∑–∞ —Ü–∏—Ç–∞—Ç—É! üëç' % message.chat.first_name)

async def main() -> None:
    # Initialize Bot instance with default bot properties which will be passed to all API calls


    # And the run events dispatching
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
